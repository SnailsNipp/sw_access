{"ast":null,"code":"import getVariation from './getVariation';\nimport { variationPlacements, basePlacements, placements as allPlacements } from '../enums';\nimport detectOverflow from './detectOverflow';\nimport getBasePlacement from './getBasePlacement';\n/* :: type OverflowsMap = { [ComputedPlacement]: number }; */\n/* ;; type OverflowsMap = { [key in ComputedPlacement]: number }; */\n/**\n * @param state\n * @param options\n */\nexport default function computeAutoPlacement(state) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const {\n    placement,\n    boundary,\n    rootBoundary,\n    padding,\n    flipVariations,\n    allowedAutoPlacements = allPlacements\n  } = options;\n  const variation = getVariation(placement);\n  const placements = variation ? flipVariations ? variationPlacements : variationPlacements.filter(placement => getVariation(placement) === variation) : basePlacements;\n  // $FlowFixMe\n  let allowedPlacements = placements.filter(placement => allowedAutoPlacements.indexOf(placement) >= 0);\n  if (allowedPlacements.length === 0) {\n    allowedPlacements = placements;\n    if (false /* __DEV__*/) {\n      console.error(['Popper: The `allowedAutoPlacements` option did not allow any', 'placements. Ensure the `placement` option matches the variation', 'of the allowed placements.', 'For example, \"auto\" cannot be used to allow \"bottom-start\".', 'Use \"auto-start\" instead.'].join(' '));\n    }\n  }\n  // $FlowFixMe: Flow seems to have problems with two array unions...\n  const overflows = allowedPlacements.reduce((acc, placement) => {\n    acc[placement] = detectOverflow(state, {\n      placement,\n      boundary,\n      rootBoundary,\n      padding\n    })[getBasePlacement(placement)];\n    return acc;\n  }, {});\n  return Object.keys(overflows).sort((a, b) => overflows[a] - overflows[b]);\n}","map":{"version":3,"names":["getVariation","variationPlacements","basePlacements","placements","allPlacements","detectOverflow","getBasePlacement","computeAutoPlacement","state","options","arguments","length","undefined","placement","boundary","rootBoundary","padding","flipVariations","allowedAutoPlacements","variation","filter","allowedPlacements","indexOf","console","error","join","overflows","reduce","acc","Object","keys","sort","a","b"],"sources":["../../../../../../../src/helpers/Popper/thirdparty/popper-core/utils/computeAutoPlacement.ts"],"sourcesContent":[null],"mappings":"AAGA,OAAOA,YAAY,MAAM,gBAAgB;AACzC,SAASC,mBAAmB,EAAEC,cAAc,EAAEC,UAAU,IAAIC,aAAa,QAAQ,UAAU;AAC3F,OAAOC,cAAc,MAAM,kBAAkB;AAC7C,OAAOC,gBAAgB,MAAM,oBAAoB;AAWjD;AAEA;AAEA;;;;AAIA,eAAc,SAAUC,oBAAoBA,CAACC,KAAqB,EAAuB;EAAA,IAArBC,OAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAmB,EAAE;EACvF,MAAM;IAAEG,SAAS;IAAEC,QAAQ;IAAEC,YAAY;IAAEC,OAAO;IAAEC,cAAc;IAAEC,qBAAqB,GAAGd;EAAa,CAAE,GAAGK,OAAO;EAErH,MAAMU,SAAS,GAAGnB,YAAY,CAACa,SAAS,CAAC;EAEzC,MAAMV,UAAU,GAAGgB,SAAS,GACxBF,cAAc,GACZhB,mBAAmB,GACnBA,mBAAmB,CAACmB,MAAM,CAACP,SAAS,IAAIb,YAAY,CAACa,SAAS,CAAC,KAAKM,SAAS,CAAC,GAChFjB,cAAc;EAElB;EACA,IAAImB,iBAAiB,GAAGlB,UAAU,CAACiB,MAAM,CAACP,SAAS,IAAIK,qBAAqB,CAACI,OAAO,CAACT,SAAS,CAAC,IAAI,CAAC,CAAC;EAErG,IAAIQ,iBAAiB,CAACV,MAAM,KAAK,CAAC,EAAE;IAClCU,iBAAiB,GAAGlB,UAAU;IAE9B,IAAI,KAAK,CAAC,cAAc;MACtBoB,OAAO,CAACC,KAAK,CACX,CACE,8DAA8D,EAC9D,iEAAiE,EACjE,4BAA4B,EAC5B,6DAA6D,EAC7D,2BAA2B,CAC5B,CAACC,IAAI,CAAC,GAAG,CAAC,CACZ;;;EAIL;EACA,MAAMC,SAAS,GAAiBL,iBAAiB,CAACM,MAAM,CAAC,CAACC,GAAG,EAAEf,SAAS,KAAI;IAC1Ee,GAAG,CAACf,SAAS,CAAC,GAAGR,cAAc,CAACG,KAAK,EAAE;MACrCK,SAAS;MACTC,QAAQ;MACRC,YAAY;MACZC;KACD,CAAC,CAACV,gBAAgB,CAACO,SAAS,CAAC,CAAC;IAE/B,OAAOe,GAAG;EACZ,CAAC,EAAE,EAAE,CAAC;EAEN,OAAOC,MAAM,CAACC,IAAI,CAACJ,SAAS,CAAC,CAACK,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKP,SAAS,CAACM,CAAC,CAAC,GAAGN,SAAS,CAACO,CAAC,CAAC,CAAC;AAC3E"},"metadata":{},"sourceType":"module"}