{"ast":null,"code":"'use strict';\n\nconst SPACES_REGEXP = / +/g;\nconst joinCommand = function (file) {\n  let args = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  if (!Array.isArray(args)) {\n    return file;\n  }\n  return [file, ...args].join(' ');\n};\n\n// Handle `execa.command()`\nconst parseCommand = command => {\n  const tokens = [];\n  for (const token of command.trim().split(SPACES_REGEXP)) {\n    // Allow spaces to be escaped by a backslash if not meant as a delimiter\n    const previousToken = tokens[tokens.length - 1];\n    if (previousToken && previousToken.endsWith('\\\\')) {\n      // Merge previous token with current one\n      tokens[tokens.length - 1] = `${previousToken.slice(0, -1)} ${token}`;\n    } else {\n      tokens.push(token);\n    }\n  }\n  return tokens;\n};\nmodule.exports = {\n  joinCommand,\n  parseCommand\n};","map":{"version":3,"names":["SPACES_REGEXP","joinCommand","file","args","arguments","length","undefined","Array","isArray","join","parseCommand","command","tokens","token","trim","split","previousToken","endsWith","slice","push","module","exports"],"sources":["/media/srv/data/diplom/web_sw_test_with_datatables/node_modules/execa/lib/command.js"],"sourcesContent":["'use strict';\nconst SPACES_REGEXP = / +/g;\n\nconst joinCommand = (file, args = []) => {\n\tif (!Array.isArray(args)) {\n\t\treturn file;\n\t}\n\n\treturn [file, ...args].join(' ');\n};\n\n// Handle `execa.command()`\nconst parseCommand = command => {\n\tconst tokens = [];\n\tfor (const token of command.trim().split(SPACES_REGEXP)) {\n\t\t// Allow spaces to be escaped by a backslash if not meant as a delimiter\n\t\tconst previousToken = tokens[tokens.length - 1];\n\t\tif (previousToken && previousToken.endsWith('\\\\')) {\n\t\t\t// Merge previous token with current one\n\t\t\ttokens[tokens.length - 1] = `${previousToken.slice(0, -1)} ${token}`;\n\t\t} else {\n\t\t\ttokens.push(token);\n\t\t}\n\t}\n\n\treturn tokens;\n};\n\nmodule.exports = {\n\tjoinCommand,\n\tparseCommand\n};\n"],"mappings":"AAAA,YAAY;;AACZ,MAAMA,aAAa,GAAG,KAAK;AAE3B,MAAMC,WAAW,GAAG,SAAAA,CAACC,IAAI,EAAgB;EAAA,IAAdC,IAAI,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,EAAE;EACnC,IAAI,CAACG,KAAK,CAACC,OAAO,CAACL,IAAI,CAAC,EAAE;IACzB,OAAOD,IAAI;EACZ;EAEA,OAAO,CAACA,IAAI,EAAE,GAAGC,IAAI,CAAC,CAACM,IAAI,CAAC,GAAG,CAAC;AACjC,CAAC;;AAED;AACA,MAAMC,YAAY,GAAGC,OAAO,IAAI;EAC/B,MAAMC,MAAM,GAAG,EAAE;EACjB,KAAK,MAAMC,KAAK,IAAIF,OAAO,CAACG,IAAI,CAAC,CAAC,CAACC,KAAK,CAACf,aAAa,CAAC,EAAE;IACxD;IACA,MAAMgB,aAAa,GAAGJ,MAAM,CAACA,MAAM,CAACP,MAAM,GAAG,CAAC,CAAC;IAC/C,IAAIW,aAAa,IAAIA,aAAa,CAACC,QAAQ,CAAC,IAAI,CAAC,EAAE;MAClD;MACAL,MAAM,CAACA,MAAM,CAACP,MAAM,GAAG,CAAC,CAAC,GAAI,GAAEW,aAAa,CAACE,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAE,IAAGL,KAAM,EAAC;IACrE,CAAC,MAAM;MACND,MAAM,CAACO,IAAI,CAACN,KAAK,CAAC;IACnB;EACD;EAEA,OAAOD,MAAM;AACd,CAAC;AAEDQ,MAAM,CAACC,OAAO,GAAG;EAChBpB,WAAW;EACXS;AACD,CAAC"},"metadata":{},"sourceType":"script"}