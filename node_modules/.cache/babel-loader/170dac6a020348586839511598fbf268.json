{"ast":null,"code":"var _jsxFileName = \"/media/srv/data/diplom/web_sw_test_with_datatables/src/pages/Terminal/Terminal.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from \"react\";\nimport './Terminal.css';\nimport { useParams } from \"react-router-dom\";\nimport { switchesMock } from \"../../core/mocks/dormMock\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Terminal = () => {\n  _s();\n  const shellinaboxFrameRef = useRef(null);\n  const [switchItem, setSwitchItem] = useState();\n  const {\n    switchId\n  } = useParams();\n  useEffect(() => {\n    if (switchId) {\n      const foundedSwitch = switchesMock[switchId];\n      setSwitchItem(foundedSwitch);\n      // Send the message to the iframe containing the Shell In A Box instance\n      if (shellinaboxFrameRef.current.contentWindow) {\n        foundedSwitch.commands.forEach(command => {\n          const message = sendInput(command);\n          const res = shellinaboxFrameRef.current.contentWindow.postMessage(message, '*');\n          console.log(res);\n        });\n      }\n    }\n  }, [switchId]);\n\n  // Send input to the Shell In A Box instancontentWindowce\n  const sendInput = command => {\n    // Create a message object containing the input string\n    return {\n      type: 'input',\n      data: command\n    };\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"terminal-wrapper\",\n    children: /*#__PURE__*/_jsxDEV(\"iframe\", {\n      ref: shellinaboxFrameRef,\n      className: \"terminal\",\n      src: \"http://localhost:43333/\",\n      width: \"100%\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 12\n  }, this);\n};\n_s(Terminal, \"RbPQ/FNmd+OVahkdfVRLTVZjT2Y=\", false, function () {\n  return [useParams];\n});\n_c = Terminal;\nvar _c;\n$RefreshReg$(_c, \"Terminal\");","map":{"version":3,"names":["React","useEffect","useRef","useState","useParams","switchesMock","jsxDEV","_jsxDEV","Terminal","_s","shellinaboxFrameRef","switchItem","setSwitchItem","switchId","foundedSwitch","current","contentWindow","commands","forEach","command","message","sendInput","res","postMessage","console","log","type","data","className","children","ref","src","width","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/media/srv/data/diplom/web_sw_test_with_datatables/src/pages/Terminal/Terminal.tsx"],"sourcesContent":["import React, {useEffect, useRef, useState} from \"react\";\nimport './Terminal.css';\nimport {ISwitch} from \"../../core/models\";\nimport {useParams} from \"react-router-dom\";\nimport {switchesMock} from \"../../core/mocks/dormMock\";\nexport const Terminal = () => {\n    const shellinaboxFrameRef = useRef<any>(null);\n    const [switchItem, setSwitchItem] = useState<ISwitch | undefined>();\n    const { switchId } = useParams();\n    useEffect(() => {\n        if (switchId) {\n            const foundedSwitch = switchesMock[switchId];\n            setSwitchItem(foundedSwitch);\n            // Send the message to the iframe containing the Shell In A Box instance\n            if (shellinaboxFrameRef.current.contentWindow) {\n                foundedSwitch.commands.forEach(command => {\n                    const message = sendInput(command);\n                    const res = shellinaboxFrameRef.current.contentWindow.postMessage(message, '*');\n                    console.log(res);\n                })\n            }\n        }\n    }, [switchId]);\n\n    // Send input to the Shell In A Box instancontentWindowce\n    const sendInput = (command: string) => {\n        // Create a message object containing the input string\n        return {\n            type: 'input',\n            data: command\n        };\n    }\n\n    return <div className=\"terminal-wrapper\">\n        {/* eslint-disable-next-line jsx-a11y/iframe-has-title */}\n        <iframe ref={shellinaboxFrameRef} className=\"terminal\" src=\"http://localhost:43333/\" width=\"100%\"></iframe>\n    </div>\n}"],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAO,OAAO;AACxD,OAAO,gBAAgB;AAEvB,SAAQC,SAAS,QAAO,kBAAkB;AAC1C,SAAQC,YAAY,QAAO,2BAA2B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AACvD,OAAO,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1B,MAAMC,mBAAmB,GAAGR,MAAM,CAAM,IAAI,CAAC;EAC7C,MAAM,CAACS,UAAU,EAAEC,aAAa,CAAC,GAAGT,QAAQ,CAAsB,CAAC;EACnE,MAAM;IAAEU;EAAS,CAAC,GAAGT,SAAS,CAAC,CAAC;EAChCH,SAAS,CAAC,MAAM;IACZ,IAAIY,QAAQ,EAAE;MACV,MAAMC,aAAa,GAAGT,YAAY,CAACQ,QAAQ,CAAC;MAC5CD,aAAa,CAACE,aAAa,CAAC;MAC5B;MACA,IAAIJ,mBAAmB,CAACK,OAAO,CAACC,aAAa,EAAE;QAC3CF,aAAa,CAACG,QAAQ,CAACC,OAAO,CAACC,OAAO,IAAI;UACtC,MAAMC,OAAO,GAAGC,SAAS,CAACF,OAAO,CAAC;UAClC,MAAMG,GAAG,GAAGZ,mBAAmB,CAACK,OAAO,CAACC,aAAa,CAACO,WAAW,CAACH,OAAO,EAAE,GAAG,CAAC;UAC/EI,OAAO,CAACC,GAAG,CAACH,GAAG,CAAC;QACpB,CAAC,CAAC;MACN;IACJ;EACJ,CAAC,EAAE,CAACT,QAAQ,CAAC,CAAC;;EAEd;EACA,MAAMQ,SAAS,GAAIF,OAAe,IAAK;IACnC;IACA,OAAO;MACHO,IAAI,EAAE,OAAO;MACbC,IAAI,EAAER;IACV,CAAC;EACL,CAAC;EAED,oBAAOZ,OAAA;IAAKqB,SAAS,EAAC,kBAAkB;IAAAC,QAAA,eAEpCtB,OAAA;MAAQuB,GAAG,EAAEpB,mBAAoB;MAACkB,SAAS,EAAC,UAAU;MAACG,GAAG,EAAC,yBAAyB;MAACC,KAAK,EAAC;IAAM;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAS;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC1G,CAAC;AACV,CAAC;AAAA3B,EAAA,CAhCYD,QAAQ;EAAA,QAGIJ,SAAS;AAAA;AAAAiC,EAAA,GAHrB7B,QAAQ;AAAA,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module"}