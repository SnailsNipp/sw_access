{"ast":null,"code":"var _jsxFileName = \"/media/srv/data/diplom/web_sw_test_with_datatables/src/pages/Terminal/Terminal.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from \"react\";\nimport './Terminal.css';\nimport { useParams } from \"react-router-dom\";\nimport { switchesMock } from \"../../core/mocks/dormMock\";\nimport exaca from 'execa';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Terminal = () => {\n  _s();\n  const shellinaboxFrameRef = useRef(null);\n  const [switchItem, setSwitchItem] = useState();\n  const {\n    switchId\n  } = useParams();\n  useEffect(() => {\n    if (switchId) {\n      const foundedSwitch = switchesMock[switchId];\n      setSwitchItem(foundedSwitch);\n      const syncedTerminal = exaca.sync('http://localhost:43333/');\n      foundedSwitch.commands.forEach(command => {\n        syncedTerminal.command(command);\n      });\n      // Send the message to the iframe containing the Shell In A Box instance\n      // const shell: HTMLIFrameElement['contentWindow'] = shellinaboxFrameRef?.current?.contentWindow;\n      // if (shell) {\n      //     foundedSwitch.commands.forEach(command => {\n      //         const message = sendInput(command);\n      //         shell.postMessage(message, '');\n      //         console.log(shellinaboxFrameRef?.current.contentWindow);\n      //     })\n      // }\n    }\n  }, [switchId]);\n\n  // Send input to the Shell In A Box instancontentWindowce\n  const sendInput = command => {\n    // Create a message object containing the input string\n    return {\n      type: 'input',\n      data: command\n    };\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"terminal-wrapper\",\n    children: /*#__PURE__*/_jsxDEV(\"iframe\", {\n      ref: shellinaboxFrameRef,\n      className: \"terminal\",\n      src: \"http://localhost:43333/\",\n      width: \"100%\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 12\n  }, this);\n};\n_s(Terminal, \"RbPQ/FNmd+OVahkdfVRLTVZjT2Y=\", false, function () {\n  return [useParams];\n});\n_c = Terminal;\nvar _c;\n$RefreshReg$(_c, \"Terminal\");","map":{"version":3,"names":["React","useEffect","useRef","useState","useParams","switchesMock","exaca","jsxDEV","_jsxDEV","Terminal","_s","shellinaboxFrameRef","switchItem","setSwitchItem","switchId","foundedSwitch","syncedTerminal","sync","commands","forEach","command","sendInput","type","data","className","children","ref","src","width","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/media/srv/data/diplom/web_sw_test_with_datatables/src/pages/Terminal/Terminal.tsx"],"sourcesContent":["import React, {useEffect, useRef, useState} from \"react\";\nimport './Terminal.css';\nimport {ISwitch} from \"../../core/models\";\nimport {useParams} from \"react-router-dom\";\nimport {switchesMock} from \"../../core/mocks/dormMock\";\nimport exaca from 'execa';\nexport const Terminal = () => {\n    const shellinaboxFrameRef = useRef<any>(null);\n    const [switchItem, setSwitchItem] = useState<ISwitch | undefined>();\n    const { switchId } = useParams();\n    useEffect(() => {\n        if (switchId) {\n            const foundedSwitch = switchesMock[switchId];\n            setSwitchItem(foundedSwitch);\n            const syncedTerminal= exaca.sync('http://localhost:43333/');\n            \n            foundedSwitch.commands.forEach(command => {\n                syncedTerminal.command(command);\n            })\n            // Send the message to the iframe containing the Shell In A Box instance\n            // const shell: HTMLIFrameElement['contentWindow'] = shellinaboxFrameRef?.current?.contentWindow;\n            // if (shell) {\n            //     foundedSwitch.commands.forEach(command => {\n            //         const message = sendInput(command);\n            //         shell.postMessage(message, '');\n            //         console.log(shellinaboxFrameRef?.current.contentWindow);\n            //     })\n            // }\n        }\n    }, [switchId]);\n\n    // Send input to the Shell In A Box instancontentWindowce\n    const sendInput = (command: string) => {\n        // Create a message object containing the input string\n        return {\n            type: 'input',\n            data: command\n        };\n    }\n\n    return <div className=\"terminal-wrapper\">\n        {/* eslint-disable-next-line jsx-a11y/iframe-has-title */}\n        <iframe ref={shellinaboxFrameRef} className=\"terminal\" src=\"http://localhost:43333/\" width=\"100%\"></iframe>\n    </div>\n}"],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAO,OAAO;AACxD,OAAO,gBAAgB;AAEvB,SAAQC,SAAS,QAAO,kBAAkB;AAC1C,SAAQC,YAAY,QAAO,2BAA2B;AACtD,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAC1B,OAAO,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1B,MAAMC,mBAAmB,GAAGT,MAAM,CAAM,IAAI,CAAC;EAC7C,MAAM,CAACU,UAAU,EAAEC,aAAa,CAAC,GAAGV,QAAQ,CAAsB,CAAC;EACnE,MAAM;IAAEW;EAAS,CAAC,GAAGV,SAAS,CAAC,CAAC;EAChCH,SAAS,CAAC,MAAM;IACZ,IAAIa,QAAQ,EAAE;MACV,MAAMC,aAAa,GAAGV,YAAY,CAACS,QAAQ,CAAC;MAC5CD,aAAa,CAACE,aAAa,CAAC;MAC5B,MAAMC,cAAc,GAAEV,KAAK,CAACW,IAAI,CAAC,yBAAyB,CAAC;MAE3DF,aAAa,CAACG,QAAQ,CAACC,OAAO,CAACC,OAAO,IAAI;QACtCJ,cAAc,CAACI,OAAO,CAACA,OAAO,CAAC;MACnC,CAAC,CAAC;MACF;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;IACJ;EACJ,CAAC,EAAE,CAACN,QAAQ,CAAC,CAAC;;EAEd;EACA,MAAMO,SAAS,GAAID,OAAe,IAAK;IACnC;IACA,OAAO;MACHE,IAAI,EAAE,OAAO;MACbC,IAAI,EAAEH;IACV,CAAC;EACL,CAAC;EAED,oBAAOZ,OAAA;IAAKgB,SAAS,EAAC,kBAAkB;IAAAC,QAAA,eAEpCjB,OAAA;MAAQkB,GAAG,EAAEf,mBAAoB;MAACa,SAAS,EAAC,UAAU;MAACG,GAAG,EAAC,yBAAyB;MAACC,KAAK,EAAC;IAAM;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAS;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC1G,CAAC;AACV,CAAC;AAAAtB,EAAA,CAtCYD,QAAQ;EAAA,QAGIL,SAAS;AAAA;AAAA6B,EAAA,GAHrBxB,QAAQ;AAAA,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module"}